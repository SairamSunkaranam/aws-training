---
AWSTemplateFormatVersion: '2010-09-09'
Description: "This template will create S3 Buckets, Role and Lambda Function"

Parameters:
  SourceBucketName:
    Type: String
    Description: "Provide the Source Bucket Name in which the images will be uploaded."
  DestinationBucketName:
    Type: String
    Description: "Provide the Destination Bucket Name in which the pixlated images will be uploaded."
  LambdaFunctionName:
    Type: String
    Description: "Provide the Lambda Function Name."
    Default: "SQS-S3-Lambda-Event-Function"
  LambdaRunTime:
    Type: String
    Description: "Provide the Run time of the Function that you want to execute on."
    Default: "python3.9"
    AllowedValues:
      - "python3.7"
      - "python3.8"
      - "python3.9"
      - "python3.10"
      - "python3.11"
  LambdaSourceCodeBucketName:
    Type: String
    Description: "Provide the S3 Bucket Name in which the source code .ZIP file exists."
  LambdaSourceCodeZIPFileName:
    Type: String
    Description: "Provide the .ZIP file name you want to upload."


Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceBucketName

  DestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DestinationBucketName

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !GetAtt SourceBucket.Arn
                  - !Sub "${SourceBucket.Arn}/*"
                  - !GetAtt DestinationBucket.Arn
                  - !Sub "${DestinationBucket.Arn}/*"
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*'

  PixelLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaSourceCodeBucketName  
        S3Key: !Ref LambdaSourceCodeZIPFileName
      Runtime: !Ref LambdaRunTime
      Timeout: 60  # 1 minute timeout
      Environment:
        Variables:
          processed_bucket: !Ref DestinationBucket
